# DQL(Data Query Language)
데이터를 조회할 때 사용하는 문법

## select
- 테이블의 데이터를 조회할 때 사용하는 명령이다.
```
/* 모든 컬럼 값 조회하기. 컬럼 순서는 테이블을 생성할 때 선언한 순서이다.*/
select * from 테이블;
select * from test16;

/* 특정 컬럼의 값만 조회할 때*/
select 컬럼명,컬럼명 from 테이블;
select no, name, working from test16;

/* 가상의 컬럼 값을 조회하기*/
select no, concat(name,'(',class,')'), 'working' 
from test16 
where working = 'Y';
```

### 조회하는 컬럼에 별명 붙이기 
- 별명을 붙이지 않으면 원래의 컬럼명이 조회 결과의 컬럼이름으로 사용된다.
- 위의 예제처럼 복잡한 식으로 표현한 컬럼인 경우 컬럼명도 그 식이 된다.
- 이런 경우 별명을 붙이면 조회 결과를 보기 쉽다.

```
/* 컬럼에 별명 붙이기*/
select 컬럼명 [as] 별명 ...
select 
    no as num, 
    concat(name,'(',class,')') as title, 
    'working' as work 
from test16 
where working = 'Y';

/* as를 생략해도 된다.*/
select 
    no num, 
    concat(name,'(',class,')') title, 
    'working' work 
from test16 
where working = 'Y';
``` 

### 조회할 때 조건 지정하기
- where 절과 연산자를 이용하여 조회 조건을 지정할 수 있다.

```
select ... from ... where 조건...
select * 
from test16
where working = 'N';
```

## 연산자

### OR, AND, NOT
- OR : 두 조건 중에 참인 것이 있으면 조회 결과에 포함시킨다.
- AND : 두 조건 모두 참일 때만 조회 결과에 포함시킨다.
- NOT : 조건에 일치하지 않을 때만 결과에 포함시킨다.
```
select * from test16;

/* 재직자 또는 java100기 학생만 조회하라!*/
select no, name
from test16
where working='Y' or class='java100';

/* java100기 학생 중에 재직자만 조회하라!*/
select no, name
from test16
where working='Y' and class='java100';

/* 재직자가 아닌 사람만 조회하라!*/
select no, name
from test16
where not working = 'Y';

select no, name
from test16
where working != 'Y';

/* 학생 번호가 짝수인 경우 전화 번호를 '1111'로 변경하라*/
update test16 set 
    tel = '1111'
where (no % 2) = 0;

/* 학생 번호가 3의 배수인 경우 전화번호를 '2222'로 변경하라*/
update test16 set
  tel = '2222'
where (no % 3) = 0;

/* 전화 번호가 있는 학생만 조회하라!*/
/* => 다음과 같이 null에 != 연산자를 사용하면 조건이 맞지 않는다.*/
select *
from test16
where tel != null; 

/* => null인지 여부를 가릴 때는 is 또는 is not 연산자를 사용하라!*/
select *
from test16
where tel is not null;

/* 전화 번호가 없는 학생만 조회하라!*/
/* => null인지 여부를 가릴 때는 = 연산자가 아닌 is 연산자를 사용해야 한다.*/
select *
from test16
where tel = null; /* 실패 */

select *
from test16
where tel is null; /* OK */

```

### 사칙연산
- +, -, *, /, % 연산자를 사용할 수 있다.
```
select (4 + 5), (4 - 5), (4 * 5), (4 / 5), (4 % 5);
```

### 비교연산
_ =, !=, >, >=, <, <=, <> 
```
select (4=5), (4!=5), (4>5), (4>=5), (4<5), (4<=5), (4<>5);
```

### between 값1 and 값2 
- 두 값 사이(두 값도 포함)에 있는지 검사한다.
```
select 5 between 3 and 5;
```

### like
- 문자열을 비교할 때 사용한다.
```
insert into test16(name,class,working) values('xxx', 'window27', '1');
insert into test16(name,class,working) values('yyy', 'window27', '0');
insert into test16(name,class,working) values('zzz', 'window28', '1');
insert into test16(name,class,working) values('qqq', 'window28', '0');
insert into test16(name,class,working) values('s01', 'javawin1', '1');
insert into test16(name,class,working) values('s02', 'javawin1', '0');
insert into test16(name,class,working) values('s03', 'javawin1', '0');
insert into test16(name,class,working) values('s04', 'iotjava5', '1');
insert into test16(name,class,working) values('s05', 'iotjava5', '0');
insert into test16(name,class,working) values('s06', 'iotjava5', '0');
insert into test16(name,class,working) values('s011', 'iotjava5', '1');
insert into test16(name,class,working) values('s012', 'iotjava5', '1');
insert into test16(name,class,working) values('s013', 'iotjava5', '1');

/* class 이름이 java로 시작하는 모든 학생 조회하기 */
select *
from test16
where class like 'java%';

/* class 이름에 java를 포함한 모든 학생 조회하기 
   이 경우 조회 속도가 느리다.*/
select *
from test16
where class like '%java%';

/* class 이름이 101로 끝나는 반의 모든 학생 조회하기 */
select *
from test16
where class like '%101';

/* 학생의 이름에서 첫번째 문자가 s이고 두번째 문자가 0인 학생 중에서
   딱 세자의 이름을 가진 학생을 모두 조회하라!*/

/* => %는 0자 이상을 의미하기 때문에 이 조건에 맞지 않다.*/
select *
from test16
where name like 's0%';

/* => _는 딱 1자를 의미한다.*/
select *
from test16
where name like 's0_';
```










